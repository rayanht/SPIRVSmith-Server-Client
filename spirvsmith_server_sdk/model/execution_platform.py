# coding: utf-8

"""
    SPIRVSmith-Server

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 0.1.0
    Generated by: https://openapi-generator.tech
"""

import re  # noqa: F401
import sys  # noqa: F401
import typing  # noqa: F401
import functools  # noqa: F401

from frozendict import frozendict  # noqa: F401

import decimal  # noqa: F401
from datetime import date, datetime  # noqa: F401
from frozendict import frozendict  # noqa: F401

from spirvsmith_server_sdk.schemas import (  # noqa: F401
    AnyTypeSchema,
    ComposedSchema,
    DictSchema,
    ListSchema,
    StrSchema,
    IntSchema,
    Int32Schema,
    Int64Schema,
    Float32Schema,
    Float64Schema,
    NumberSchema,
    UUIDSchema,
    DateSchema,
    DateTimeSchema,
    DecimalSchema,
    BoolSchema,
    BinarySchema,
    NoneSchema,
    none_type,
    Configuration,
    Unset,
    unset,
    ComposedBase,
    ListBase,
    DictBase,
    NoneBase,
    StrBase,
    IntBase,
    Int32Base,
    Int64Base,
    Float32Base,
    Float64Base,
    NumberBase,
    UUIDBase,
    DateBase,
    DateTimeBase,
    BoolBase,
    BinaryBase,
    Schema,
    _SchemaValidator,
    _SchemaTypeChecker,
    _SchemaEnumMaker
)


class ExecutionPlatform(
    DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    _required_property_names = set((
        'vulkan_backend',
    ))

    @classmethod
    @property
    def vulkan_backend(cls) -> typing.Type['VulkanBackend']:
        return VulkanBackend

    @classmethod
    @property
    def operating_system(cls) -> typing.Type['OperatingSystem']:
        return OperatingSystem
    
    
    class available_hardware(
        DictSchema
    ):
        
        
        class _additional_properties(
            ListSchema
        ):
        
            @classmethod
            @property
            def _items(cls) -> typing.Type['HardwareInformation']:
                return HardwareInformation
    
    
        def __new__(
            cls,
            *args: typing.Union[dict, frozendict, ],
            _configuration: typing.Optional[Configuration] = None,
            **kwargs: typing.Type[Schema],
        ) -> 'available_hardware':
            return super().__new__(
                cls,
                *args,
                _configuration=_configuration,
                **kwargs,
            )


    def __new__(
        cls,
        *args: typing.Union[dict, frozendict, ],
        vulkan_backend: vulkan_backend,
        operating_system: typing.Union['OperatingSystem', Unset] = unset,
        available_hardware: typing.Union[available_hardware, Unset] = unset,
        _configuration: typing.Optional[Configuration] = None,
        **kwargs: typing.Type[Schema],
    ) -> 'ExecutionPlatform':
        return super().__new__(
            cls,
            *args,
            vulkan_backend=vulkan_backend,
            operating_system=operating_system,
            available_hardware=available_hardware,
            _configuration=_configuration,
            **kwargs,
        )

from spirvsmith_server_sdk.model.hardware_information import HardwareInformation
from spirvsmith_server_sdk.model.operating_system import OperatingSystem
from spirvsmith_server_sdk.model.vulkan_backend import VulkanBackend
